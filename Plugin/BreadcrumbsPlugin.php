<?php

namespace Smatric\FullPathBreadcrumbs\Plugin;

/*
 * Intercept original path for breadcrumbs and add product categories to it
 * if its only: HOME -> Product
 */
class BreadcrumbsPlugin
{
    const PATH_CONTAINS_ONLY_PRODUCT = 1;
    
    private $_cachedPath = null;
    
    public function __construct(
        \Magento\Store\Model\StoreManagerInterface $storeManager,
        \Magento\Catalog\Helper\Category $catalogCategory,
        \Magento\Catalog\Model\CategoryFactory $categoryFactory
    ){
        $this->_storeManager    = $storeManager;
        $this->_categoryFactory = $categoryFactory;
        $this->_catalogCategory = $catalogCategory;
    }
    
    /**
     * Return current category path generated by Magento or, if it's not
     * full, get it product categories
     *
     * @param \Magento\Catalog\Helper\Data $data
     * @param array $originalPath
     * @return array
     */
    public function afterGetBreadcrumbPath(\Magento\Catalog\Helper\Data $data, $originalPath)
    {
        // If path has already been built, return the cached value
        if ($this->_cachedPath !== null) {
            return $this->_cachedPath;
        }
        
        // For now assume the original path to be the result
        $this->_cachedPath = $originalPath;
        
        // Original path is full
        if (count($originalPath) > self::PATH_CONTAINS_ONLY_PRODUCT) {
            return $originalPath;
        }
        
        // This is not a product page
        if ($data->getProduct() === null) {
            return $originalPath;
        }
        
        $categoryIds = $data->getProduct()->getCategoryIds();
        
        // The product doesn't belong to any categories
        if (count($categoryIds) === 0) {
            return $originalPath;
        }
        
        $category = null;
        
        // Choose first qualifying category
        foreach ($categoryIds as $categoryId) {
            $categoryToBeChecked = $this->_categoryFactory->create()->load($categoryId);
            
            if ($this->_categoryQualifiesForBreadcrumbs($categoryToBeChecked)) {
                $category = $categoryToBeChecked;
                break;
            }
        }
        
        // None of product categories qualifies for path incusion
        if ($category === null) {
            return $originalPath;
        }
        
        // Create a new path with first available category
        $path = [];

        $this->_addParentCategoriesToPathRecursively($category, $path);
        
        // Add the product itself
        if ($data->getProduct()) {
            $path['product'] = ['label' => $data->getProduct()->getName()];
        }
        
        // Save the new computed path in cache
        $this->_cachedPath = $path;
        
        return $path;
    }
    
    private function _categoryQualifiesForBreadcrumbs($category) {
        return $category->getIsActive()      == true
            && $category->getIncludeInMenu() == true
            && $category->getId() != $this->_storeManager->getStore()->getRootCategoryId()
            && $category->getId() != 0;
    }
    
    private function _addCategoryToPath($category, &$path) {
        $path['category' . $category->getId()] = [
            'label' => $category->getName(),
            'link'  => $this->_catalogCategory->getCategoryUrl($category)
        ];
    }
    
    private function _addParentCategoriesToPathRecursively($category, &$path) {
        if (!$this->_categoryQualifiesForBreadcrumbs($category)) {
            return;
        }
        
        $parentCategory = $this->_categoryFactory->create()->load($category->getParentId());
        
        // Look for parent categories recursively
        $this->_addParentCategoriesToPathRecursively($parentCategory, $path);
        
        // Add current category at the end of the path
        $this->_addCategoryToPath($category, $path);
    }
}